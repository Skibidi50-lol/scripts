local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/jensonhirst/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Prison Life - Syntix", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

local noclipEnabled = false
local InfiniteJumpEnabled = false

local selectedGunMod = nil
local gunMod = nil

local LocalPlayer = game:GetService("Players").LocalPlayer
local RunService = game:GetService("RunService")

local gun = "Remington 870";

local SP = {}
local PG = {
    ["AK-47"] = true,
    ["Remington 870"] = true,
    ["M9"] = true,
    ["M4A1"] = true,
    ["All"] = true
}

local SetCFrame = function(x : CFrame)
    LocalPlayer.Character['HumanoidRootPart'].CFrame = x;
end

local NotifyPlayer = function(title : string, text : string, dur : number)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = dur or 5;
    })
end

local GrabItem = function(itemorigin, item)
    local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart");
    local timeout = tick() + 5

    if hrp then 
        SP.GetGunOldPos = not SP.GetGunOldPos and hrp.CFrame or SP.GetGunOldPos;
    end

    local ItemToGrab = itemorigin:FindFirstChild(item)
    local IP = ItemToGrab['ITEMPICKUP']
    local IPPos= IP.Position

    if hrp then 
        SetCFrame(CFrame.new(IPPos));
    end; 

    repeat task.wait()

        pcall(function()
            LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Sit = false;
            SetCFrame(CFrame.new(IP))
        end); 
        task.spawn(function()
            game:GetService("Workspace").Remote.ItemHandler:InvokeServer(IP)
        end)

    until LocalPlayer.Backpack:FindFirstChild(item) or LocalPlayer.Character:FindFirstChild(item) or tick() - timeout >=0

    pcall(function() 
        SetCFrame(SP.GetGunOldPos);
    end) 


    SP.GetGunOldPos = nil
end

local GiveItem = function(gungiver, gun)
    if gungiver and gungiver == "old" then
        game:GetService("Workspace").Remote.ItemHandler:InvokeServer(gun)

        return
    end

    for _, givers in pairs(workspace.Prison_ITEMS:GetChildren()) do
        if givers:FindFirstChild(gun) then
            GrabItem(gungiver, gun)
            break
        end

        return
    end

    if gungiver then
        workspace.Remote.ItemHandler:InvokeServer({Position = LocalPlayer.Character.Head.Position, Parent = gungiver:FindFirstChild(gun)})
    else
        workspace.Remote.ItemHandler:InvokeServer({Position = LocalPlayer.Character.Head.Position, Parent = workspace.Prison_ITEMS.giver:FindFirstChild(gun) or workspace.Prison_ITEMS.single:FindFirstChild(gun)})
    end
end

local SpawnGun = function(guntogive : string)
    if guntogive ~= "All" then
        workspace.Remote.ItemHandler:InvokeServer({
            Position = LocalPlayer.Character.Head.Position,
            Parent = workspace.Prison_ITEMS.giver:FindFirstChild(guntogive)
                or workspace.Prison_ITEMS.single:FindFirstChild(guntogive)
        })
    else
        for gunName, _ in pairs(PG) do
            if gunName ~= "All" then
                workspace.Remote.ItemHandler:InvokeServer({
                    Position = LocalPlayer.Character.Head.Position,
                    Parent = workspace.Prison_ITEMS.giver:FindFirstChild(gunName)
                        or workspace.Prison_ITEMS.single:FindFirstChild(gunName)
                })
            end
        end
    end
end

RunService.Stepped:Connect(function()
	if noclipEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
		for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
			if part:IsA("BasePart") then
				part.CanCollide = false
			end
		end
	end
end)

function infJump()
   game:GetService("UserInputService").JumpRequest:connect(function()
	if InfiniteJumpEnabled then
		game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
	    end
    end)
end

--TABS
local UniversalTab = Window:MakeTab({
	Name = "Universal",
	Icon = "rbxassetid://121160482905138",
	PremiumOnly = false
})

local GunsTab = Window:MakeTab({
	Name = "Guns",
	Icon = "rbxassetid://124971614145316",
	PremiumOnly = false
})

local ModsTab = Window:MakeTab({
	Name = "Mods",
	Icon = "rbxassetid://83757646428524",
	PremiumOnly = false
})

--SECTIONS
local PlayerSection = UniversalTab:AddSection({
	Name = "Player"
})

local GunsSection = GunsTab:AddSection({
	Name = "Guns"
})

local GunsModSection = GunsTab:AddSection({
	Name = "Guns Mod (Level 8 Executor Only)"
})


local ModsSection = ModsTab:AddSection({
	Name = "Mods"
})
--UNIVERSAL TAB
PlayerSection:AddSlider({
	Name = "WalkSpeed",
	Min = 16,
	Max = 250,
	Default = 16,
	Color = Color3.fromRGB(255,255,255),
	Increment = 5,
	ValueName = "WS",
	Callback = function(Value)
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
	end    
})

PlayerSection:AddSlider({
	Name = "JumpPower",
	Min = 50,
	Max = 250,
	Default = 50,
	Color = Color3.fromRGB(255,255,255),
	Increment = 5,
	ValueName = "JP",
	Callback = function(Value)
		game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
	end    
})

PlayerSection:AddToggle({
	Name = "Noclip",
	Default = false,
	Callback = function(Value)
		noclipEnabled = Value
		NotifyPlayer("Noclip", Value and "Enabled" or "Disabled", 2)
	end    
})

PlayerSection:AddToggle({
	Name = "Infinite Jump",
	Default = false,
	Callback = function(Value)
		InfiniteJumpEnabled = Value
		infJump()
		NotifyPlayer("Infinite Jump", Value and "Enabled" or "Disabled", 2)
	end    
})

PlayerSection:AddButton({
	Name = "Fling All",
	Callback = function()
      	loadstring(game:HttpGet("https://raw.githubusercontent.com/CorgiSideExploits/OrionLib/refs/heads/main/SkidFling", true))()
  	end    
})
--GUNS TAB
GunsSection:AddDropdown({
	Name = "Choose Gun",
	Default = "Remington 870",
	Options = {"Remington 870", "M9", "M14A1", "AK-47", "All"},
	Callback = function(Value)
		gun = Value
	end    
})

GunsSection:AddButton({
	Name = "Get Gun",
	Callback = function()
      	if PG[gun] then
			if gun == "All" then
				SpawnGun("All")
				NotifyPlayer("FE Gun Spawner", "Successfully Gave You All Guns")
			else
				SpawnGun(gun)
				NotifyPlayer("FE Gun Spawner", "Successfully Gave You " .. gun)
			end
		else
			NotifyPlayer("Error", "Invalid gun selected", 3)
		end
  	end    
})
--GUN MOD
GunsModSection:AddDropdown({
	Name = "Infinite Ammo",
	Default = nil,
	Options = {"Remington 870", "M9", "M14A1", "AK-47"},
	Callback = function(Value)
        selectedGunMod = Value

        local gunTool = game.Players.LocalPlayer.Backpack:FindFirstChild(selectedGunMod)
        if not gunTool then
            NotifyPlayer("Gun Mod", "Please get the gun first using the 'Get Gun' button", 3)
            gunMod = nil
            return
        end

        local success, result = pcall(function()
            return require(gunTool:WaitForChild("GunStates"))
        end)

        if success then
            gunMod = result
            NotifyPlayer("Gun Mod", selectedGunMod .. " gunMod loaded", 2)
        else
            NotifyPlayer("Gun Mod", "Failed to load GunStates", 3)
            gunMod = nil
        end
	end    
})

GunsModSection:AddButton({
	Name = "Apply",
	Callback = function()
        if gunMod then
            gunMod["MaxAmmo"] = math.huge
            gunMod["CurrentAmmo"] = math.huge
            gunMod["StoredAmmo"] = math.huge
            NotifyPlayer("Gun Mod", "Infinite ammo applied", 2)
        else
            NotifyPlayer("Gun Mod", "No gun gunMod loaded", 3)
        end
	end    
})

GunsModSection:AddDropdown({
	Name = "AutoFire",
	Default = nil,
	Options = {"Remington 870", "M9", "M14A1", "AK-47"},
	Callback = function(Value)
		selectedGunForMod = Value
		local gunInBackpack = game.Players.LocalPlayer.Backpack:FindFirstChild(Value)
		if gunInBackpack then
			gunMod = require(gunInBackpack:FindFirstChild("GunStates"))
			NotifyPlayer("Gun Mod", Value .. " loaded", 2)
		else
			NotifyPlayer("Gun Mod", Value .. " not found in backpack", 2)
			gunMod = nil
		end
	end    
})

GunsModSection:AddButton({
	Name = "Apply",
	Callback = function()
		if gunMod then
			gunMod["AutoFire"] = true
			NotifyPlayer("Gun Mod", "Spread applied to " .. selectedGunForMod, 2)
		else
			NotifyPlayer("Gun Mod", "No gun gunMod loaded", 2)
		end
	end    
})

GunsModSection:AddDropdown({
	Name = "OP Gun Mod(Buggy)",
	Default = nil,
	Options = {"Remington 870", "M9", "M14A1", "AK-47"},
	Callback = function(Value)
        selectedGunMod = Value

        local gunTool = game.Players.LocalPlayer.Backpack:FindFirstChild(selectedGunMod)
        if not gunTool then
            NotifyPlayer("Gun Mod", "Please get the gun first using the 'Get Gun' button", 3)
            gunMod = nil
            return
        end

        local success, result = pcall(function()
            return require(gunTool:WaitForChild("GunStates"))
        end)

        if success then
            gunMod = result
            NotifyPlayer("Gun Mod", selectedGunMod .. " gunMod loaded", 2)
        else
            NotifyPlayer("Gun Mod", "Failed to load GunStates", 3)
            gunMod = nil
        end
	end    
})

GunsModSection:AddButton({
	Name = "Apply",
	Callback = function()
        if gunMod then
            gunMod["MaxAmmo"] = math.huge
            gunMod["CurrentAmmo"] = math.huge
            gunMod["StoredAmmo"] = math.huge
            gunMod["FireRate"] = 0.35
            gunMod["Spread"] = 0
            gunMod["Range"] = 1200
            gunMod["Bullets"] = 10
            NotifyPlayer("Gun Mod", "Gun Mod applied", 2)
        else
            NotifyPlayer("Gun Mod", "No gun gunMod loaded", 3)
        end
	end    
})



OrionLib:Init()
